@import './colors';
@import './animations';

*,
*::after,
*::before {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
html {
	font-size: 62.5%;
	scroll-behavior: smooth;
}
body {
	font-family: 'Raleway', sans-serif;
	font-family: 'Cinzel', serif;
	background-color: #333;
	font-size: 1.6rem;
	color: $white;
	background-color: $dark;
}
h1.company-name {
	margin-bottom: 0.5em;
	font-size: 3rem;
	font-family: 'Cinzel', serif;
	color: gold;
}
.wrapper {
	margin: 0 auto;
	max-width: 1200px;
	width: 100%;
	// background-color: green;
}
.section-title {
	/*z sekcji info*/
	position: relative; /*względem tego elementu będziemy pozycjonować jego dziecko, czyli ::before*/
	margin: 0 auto 2em; /*auto gwarantuje ustawienie tytułu na środku*/
	width: fit-content; /*żeby dopasować szerokość do treści*/
	font-size: 3.2rem;
	color: gold;
	font-weight: 200;
	// background-color: red;
	&::before {
		/*stąd efekt podkreślenia*/
		position: absolute;
		bottom: 0em;
		left: 0;
		width: 40px;
		height: 2px;
		background-color: $gold;
		content: '';
	}
	span {
		font-weight: 900;
		// background-color: green;
	}
}
//header
.header {
	/*header za pomoacą grid jest podzielony na 4 części, z dzieci zabieramy: button oraz nav za pomocą position absolute*/
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	grid-template-rows: repeat(2, 1fr);
	height: 100vh; /*w ten sposób budujemy wysokość headera*/
	position: relative; /*żeby dzieci mogłby mieć absolute*/
	overflow: hidden;
	// background-color: green;
	&__text {
		display: grid; /*tutaj mamy do czynienia z sytuacją, gdy ustawiamy sobie grid na rodzicu a dzieciom nadajemy jcc oraz aic. Powoduje to, że obszar zajęty przez text zostaje podzielony na część zajmowaną przez dzieci, czyli h1 oraz p. Treść ustawia się w centrum tych dwóch obszarów. W przypadku, gdybyśmy na rodzica, czyli na &__text dali display:flex, to rodzi nie zostałby podzielony na dwa obszary a dzieci ustawiłyby się na srodku tego jednego obszaru*/
		justify-content: center; /*centrowanie jak we flexie*/
		align-items: center;
		grid-row: 2 / 3;
		grid-column: 1 / 3;
		padding: 2em;
		// background-color: aqua;
		p {
			font-weight: 200;
		}
	}
	&__img {
		position: relative; /*po jego dziecko ma absolute*/
		grid-row: 1/2;
		grid-column: 1 / 3;
		width: 100%;
		height: 100%;
		background-image: url('../img/header_small.jpg');
		background-size: cover; /*żeby zdjęcie było rozciągnięte, coś co przypomina object-fit:cover w przypadku elementów img*/
		background-position: center;
		filter: sepia();
	}
	&__shadow {
		position: absolute;
		width: 100%; /*względem rodzica, czyli &__img*, tak, aby zasłaniał cały element*/
		height: 100%;
		background-color: rgb(0, 0, 0, 0.3);
	}
	&__arrow {
		display: none;
	}
	&__bg-icon-one,
	&__bg-icon-two {
		position: absolute; /*to ważna informacja*/
		opacity: 0.05;
		z-index: -5; /*żeby ikona była pod tekstem, nie zasłaniała go*/
		// background-color: orange;
	}
	&__bg-icon-two {
		display: none; /*żeby jej nie widać na urządzeniach mobilnych*/
	}
	&__bg-icon-one {
		bottom: 0.5em;
		right: -3em;
		height: 30%; /*tzreba dać jakiś wymiar: height lub width*/
		animation: rotate-right 55s infinite linear; /*animacja powtarzająca się w nieskończoność, linear-  czyli z jednakowa prędkością*/
	}
	.hamburger {
		/*mimo że zaimportowaliśmy ustawienia hamburgera poprzez link, to musimy go teraz ustawić na stronie*/
		position: absolute;
		top: 3em;
		left: 1em;
		transform: translateY(-50%);
		z-index: 700;
		// background-color: orange;
		&-inner, /*inner odpowiada za kreski poziome hamburgera*/
		&-inner::after,
		&-inner::before {
			background-color: $white;
		}
	}
	.nav {
		&-desktop {
			display: none;
		}
		&-mobile {
			position: absolute; /*top, bottom, right, left na 0, zeby rozciagnąć na cały ekran*/
			top: 0;
			bottom: 0;
			left: 0;
			right: 0;
			display: flex; /*żeby wypozycjonować dzieci, tutaj, żeby zobaczyć jak wygląda cała nawigacja rozciągnięta, daj kolor tła na np. pomarańczowy i daj wysoki z-index*/
			justify-content: center;
			align-items: center;
			flex-direction: column;
			transform: translateX(
				-102%
			); /* nie 100% bo sie z boku pojawiał biały pasek*/
			transition: transform 0.3s;
			z-index: 2000;
			&--active {
				transform: translateX(0%);
				background-color: $white;
				z-index: 30;
			}
		}
		// background-color: $white;
		&__link {
			position: relative;
			display: inline-block;
			margin: 0.5em;
			padding: 0.5em;
			text-decoration: none;
			font-size: 2.3rem;
			color: $darker;
			text-transform: uppercase;
			transition: color 0.3s;
			cursor: pointer;
			// background-color: red;
			&:hover {
				color: gold;
			}
			// &::before { /*treść przeniesiona do large*/
			// 	position: absolute; /*bo to dziecko linku*/
			// 	top: 0;
			// 	left: 0;
			// 	content: ''; /*nie zapominaj*/
			// 	width: 100%;
			// 	height: 100%;
			// 	border: 1px solid gold;
			// 	opacity: 0;
			// 	// background-color: red;
			// }
			// &:hover::before {
			// 	/*PROBLEM bo napisałem samo &:hover i domyślnie myślałem, że skoro jest w nawiasach ::before, to będzie na niego oddziaływał, ale tak nie jest, trzeba dopisywać ::before*/
			// 	animation: pulse 1s;
			// }
		}
	}
}
//main
//cards
.main {
	.cards {
		background-color: $darker;
		overflow: hidden; /*dajemy tę wartość ze względu na animację, która będzie na before do card - linijka 195, gdyby overlow nie bylo hidden, to przy małych rozdzielczościach ze względu na wartość transform: scale (1.2) mielibyśmy nieporządany efekt*/

		&__box {
			display: grid;
			grid-template-columns: repeat(
				9,
				1fr
			); /*liczba rzędów nie jest podawana,  ale jest trójka dzieci: 3 *cars__card i powstają 3 rzędy*/
			gap: 2em;
			padding: 6em;
			// background-color: green;
		}
		&__card {
			/*są trzy karty - ta sekcja na desktopie będzie miała mniejszą wysokość, za sprawą ułożenia trzech kart obok siebie*/
			position: relative; /*wzgledniem rodzica będziemy pozycjonować before i tylko dlatego jest ta pozycja*/
			display: grid; /*ponieważ karta ma 3 dzieci: img,h3 oraz p, i nadaliśmy jej grid a nie napisaliśmy ile ma mieć row i columns, na chwilę obecną została stworzona 1 kolumna na treść i 3 wiersze na każde dziecko po jednym, nie można tutaj zastąpić: display: flex, bo elementy ułożą sieobok siebie przy zapisie justify: center*/
			justify-items: center; /*uwaga w grid nie używamy justify-content:center*/
			// align-items: center;
			padding: 3em;
			text-align: center;
			border: 1px solid transparent; /*dodajemy transparent, żeby po dodaniu hovera i w hoverze wprowadzeniu zmiany na borderze,  div z klasą cards__card nie skakały - hover będzie powodował tylko zmianę koloru hovera z transparent na złoty*/
			border-radius: 8px;
			background-color: $dark;
			transition: background-color 0.3s, border 0.3s; /*zauważ przecinek w takim wyp.*/
			z-index: 5; /*ze względu na animację na ::before, żeby rozchodzące się linie nie dawały nieporządanego efektu*/
			&:hover {
				background-color: $darker;
				border: 1px solid gold;
				z-index: 1;
			}
			&::before {
				/*jest dzieckiem &__card*/
				position: absolute;
				content: '';
				width: 100%;
				height: 100%; /*dając takie wartości, nie potrzebujemy pozycjonować za pomocą left, right*/
				border: 1px solid gold;
				border-radius: 8px;
				opacity: 0;
			}
			&:hover::before {
				animation: pulse 1s;
			}
			img {
				margin-bottom: 1em;
				width: 60px;
			}
			h3 {
				margin-bottom: 0.6em;
				text-transform: uppercase;
			}
			&--one {
				/*ta sama klasa co cards__card*/
				grid-column: 1/-1; /*jak zwykle na początku pracujemy na urządzeniach mobilnych, więc pod nie te wartości, potem na breakpointach pozmieniamy; tu pozycjonujemy na siatce gridowej rodzica!!!*/
				grid-row: 1/2;
				background-color: red;
			}
			&--two {
				grid-column: 1/-1;
				grid-row: 2/3;
				background-color: blue;
			}
			&--three {
				grid-column: 1/-1;
				grid-row: 3/4;
				background-color: violet;
			}
		}
	}
}
//info
.info {
	position: relative; /*względem tego rodzica będziemy pozycjonować kwadraciki i iksy z samego dołu sekcji*/
	display: grid;
	grid-template-areas: /*generalnie w tej sekcji mamy jedną kolumnę, stąd taki zapis*/
		'title'
		'box'
		'box';
	padding: 6em 2em;
	&__title {
		grid-area: title; /*tutaj nie ma cudzysłowu*/
	}
	&__boxes {
		grid-area: box; /*tutaj nie ma cudzysłowu*/
		// background-color: blue;
	}
	&__box-img {
		width: 100%;
		object-fit: contain;
		filter: sepia();
	}
	&__box-title {
		margin: 0.3em 0;
		font-size: 2.6rem;
		color: $gold;
		font-weight: 200;
		// background-color: yellow;
	}
	&__box-text {
		margin-bottom: 0.5em;
	}
	&__box-link {
		display: block;
		margin-bottom: 2em;
		font-weight: bold;
		text-align: right; /*wyrównuje tekst do prawej*/
		color: $gold;
		text-decoration: none;
		transition: color 0.3s;
		&:hover {
			color: $darkgold;
		}
	}
	&__bg-icon {
		display: none;
	}
}
//plans
.plans {
	padding: 6em 2em; /*tak wpływamy w dużym stopniu na wymiar sekcji, uwaga ta sekcja na urządzenie maobilne nie jest ułożona za pomocą grid, po prostu wykorzystuje, że div.plans__box ukladają się jeden pod drugim jako elementy blokowe*/
	background-color: $darker;
	&__box {
		margin: 1em 0;
		padding: 2em 1em;
		text-align: center;
		border: 1px solid transparent; /*ze względu na to, że na hover będziemy wywoływać akcję, w której wywołamy sobie border, gdybyśmy nie wpisali tutaj border, obraz zacząłby się trząść*/
		border-radius: 8px;
		transition: all 2s;
		background-color: $dark;
		cursor: pointer; /*taki niby element klikalny, bo w zasadzie, każdy boż powinien być w środku tagu "a"*/
		&:hover {
			background-color: $darker;
			border: 1px solid $gold;
		}
	}
	&__item {
		padding: 1em 0;
		// background-color: pink;
		font-size: 1.8rem;
		color: $gold;
	}
	&__item-icon {
		width: 50px;
	}
	&__item-name {
		margin-top: 0;
		margin-bottom: 1.5em;
	}
}
//newsletter
.newsletter {
	padding: 8em 2em; /*zwiększając padding, zwiększamy obszar zajmowany przez sekcję i powodujemy, że ona rośnie na wysokość, czyli padding odpowiada często za rozmiar sekcji góra/ dół*/
	background-color: $red;
	text-align: center;
	&__text {
		padding: 1em;
		margin-bottom: 1em;
		font-size: 4rem;
		font-weight: 200;
	}
	&__input {
		margin-bottom: 1em;
		padding: 1em; /*przez co automatycznie rozrósł się cały input*/
		width: 100%;
		background-color: $white;
		border: 1px solid transparent;
	}
	&__button {
		margin-top: 1em;
		padding: 2em;
		border: 1px solid $gold;
		border-radius: 8px;
		background: none;
		color: gold;
		font-weight: bold;
		transition: background-color 0.3s, color 0.3s;
		&:hover {
			background-color: $gold;
			color: $red;
		}
	}
}
//gallery
.gallery {
	display: grid;
	grid-template-columns: repeat(2, 1fr);
	&__img {
		height: 300px;
		width: 100%; /*odnosimy się do szerokości frakcji*/
		object-fit: cover; /*obraz zostanie wypełniony, a nie zdeformowany, a nadmiarowa zawartość zostanie obcięta, widać to w notatkach na str 425 */
		// background-color: red;
		&:nth-child(odd) {
			display: none;
		}
	}
}
.contact {
	padding: 6em 2em; /*standardowo, tak, jak na innych sekcjach*/
	&__form {
		display: grid;
		grid-template-columns: repeat(6, 1fr);
		&-btn {
			grid-column: 1/3;
			grid-row: 4/5;
			padding: 1em;
			min-width: 70px;
			border: 1px solid $gold;
			background: none;
			font-weight: bold;
			color: $gold;
			cursor: pointer;
			transition: background-color 0.3s color 0.3s;
			&:hover,
			&:focus {
				outline: none;
				background-color: $gold;
				color: $dark;
			}
		}
	}
	&__form-box {
		label {
			display: block;
			margin-bottom: 0.5em;
			font-size: 2rem;
		}
		textarea {
			height: 70%;
			resize: vertical; /*zapobiega rozciaganiu się w szerz*/

			// background-color: red;
		}
		input,
		textarea {
			padding: 1em 2em;
			margin-bottom: 2em;
			width: 100%;
			color: $white;
			background: none;
			border: 1px solid rgba(255, 255, 255, 0.1);
			&:focus {
				outline: none; /*żeby pozbyć się focusa*/
				border: 1px solid $gold; /*żeby był ładny efekt podświetlenia*/
			}
		}
		&:nth-child(1) {
			/*zamiast dawać każdemu z boxów oddzielną klasę efekt osiągamy przez &:nth-child(..)*/
			grid-column: 1/-1;
			grid-row: 1/2;
		}
		&:nth-child(2) {
			grid-column: 1/-1;
			grid-row: 2/3;
		}
		&:nth-child(3) {
			grid-column: 1/-1;
			grid-row: 3/4;
		}
	}
}
.footer {
	padding: 3em 1em;
	border-top: 2px solid $darker;
	text-align: center;
}
@import './small';
@import './medium';
@import './large';
